package ${package}.controller;

import java.util.List;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import ${package}.domain.${className}DO;
import ${package}.service.${className}Service;
import com.sf.common.utils.PageUtils;
import com.sf.common.utils.R;

/**
 * ${comments}
 * 
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
 
@Controller
@RequestMapping("/${pathName}/${classname}")
public class ${className}Controller {
	@Autowired
	private ${className}Service ${classname}Service;
	
	@GetMapping()
	@RequiresPermissions("${pathName}:${classname}:${classname}")
	String ${className}(){
	    return "${pathName}/${classname}/${classname}";
	}
	
	@ResponseBody
	@PostMapping("/list")
	@RequiresPermissions("${pathName}:${classname}:${classname}")
	public PageUtils list(@RequestBody BootStrapTableQueryBean bootStrapTableQueryBean,${className} ${classname}){
		/使用分页插件,核心代码就这一行
        PageHelper.offsetPage(bootStrapTableQueryBean.getPage().getOffset(),bootStrapTableQueryBean.getPage().getLimit());
        //字段非模糊查询
//		if(StringUtils.isNotBlank(params.get("searchValue").toString())&&StringUtils.isNotBlank(params.get("searchColumn").toString())){
//			ReflectGetSet.invokeSet(${classname},params.get("searchColumn").toString(),params.get("searchValue"));
//		}
//		List<${className}> ${classname}List =  ${classname}Service.list(${classname});
        // 字段模糊查询
        List<${className}> ${classname}List = ${classname}Service.like(${classname},bootStrapTableQueryBean.getSearch().getSearchColumn(), bootStrapTableQueryBean.getSearch().getSearchValue(), bootStrapTableQueryBean.getSearch().getDateType(), bootStrapTableQueryBean.getSearch().getOrderBy());
        PageUtils pageUtils = new PageUtils(new PageInfo<>(${classname}List));
		return pageUtils;
	}
	
	@GetMapping("/add")
	@RequiresPermissions("${pathName}:${classname}:add")
	String add(){
	    return "${pathName}/${classname}/add";
	}

	@GetMapping("/edit/{${pk.lowercaseAttName}}")
	@RequiresPermissions("${pathName}:${classname}:edit")
	String edit(@PathVariable("${pk.lowercaseAttName}") ${pk.attrType} ${pk.lowercaseAttName},Model model){
		${className} ${classname} = ${classname}Service.getById(${pk.lowercaseAttName});
		model.addAttribute("${classname}", ${classname});
	    return "${pathName}/${classname}/edit";
	}
	
	/**
	 * 保存
	 */
	@ResponseBody
	@PostMapping("/save")
	@RequiresPermissions("${pathName}:${classname}:add")
	public R save( ${className} ${classname}){
		if(${classname}Service.save(${classname})>0){
			return R.ok();
		}
		return R.error();
	}
	/**
	 * 修改
	 */
	@ResponseBody
	@RequestMapping("/update")
	@RequiresPermissions("${pathName}:${classname}:edit")
	public R update( ${className} ${classname}){
		${classname}Service.update(${classname});
		return R.ok();
	}
	
	/**
	 * 删除
	 */
	@PostMapping( "/remove")
	@ResponseBody
	@RequiresPermissions("${pathName}:${classname}:remove")
	public R remove( ${pk.attrType} ${pk.lowercaseAttName}){
		if(${classname}Service.deleteById(${pk.lowercaseAttName})>0){
		return R.ok();
		}
		return R.error();
	}
	
##	/**
##	 * 删除
##	 */
##	@PostMapping( "/batchRemove")
##	@ResponseBody
##	@RequiresPermissions("${pathName}:${classname}:batchRemove")
##	public R remove(@RequestParam("ids[]") ${pk.attrType}[] ${pk.attrname}s){
##		${classname}Service.batchRemove(${pk.attrname}s);
##		return R.ok();
##	}
	
}
